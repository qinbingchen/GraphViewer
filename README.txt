这是一个动态演示图布局及各种图算法的掩饰工具，目前支持：
1.显示图（包括带权、不带权、有向、无向），带权图显示权值，有向图用箭头表示方向；
2.利用Force-Directed算法对图进行布局，目前优化不是非常好，会有抖动现象，尚不知如何解决；
3.利用鼠标拖动节点进行调整，支持固定节点位置；
4.添加、删除节点；添加、删除边；编辑节点标签；对于带权图编辑边的权值；
5.对图进行DFS、BFS，并动态显示遍历过程；
6.利用Dijkstra算法求两点间最短路径，并动态显示访问过程；
7.利用Prim算法求从某一点开始的最小生成树，并将边高亮显示。
8.从文件读取图，保存图到文件；
待续...

开始运行时需要选择一个输入文件，这里提供了3个样例：
sample 1.json是无权无向图；
sample 2.json是带权有向图；
sample 3.json是带权无向图；
以上3个图的节点和边内容一样，区别仅在是否带权和是否有向。
在节点、边上、空白处上用右键点击分别能出现对应的菜单。
菜单栏中的New是新建图，Open是打开文件，均不会保存当前图，请注意。

注意：
在有向图上运行DFS、BFS、Prim算法不一定能访问到所有节点；
空白处右键菜单中的reset是清除当前图的所有样式（是否高亮、是否被选择、是否固定等），empty是清空所有内容，生成一张空图；
图的数据文件采用JSON格式，具体格式可见样例，节点由标签唯一确定，文件中只包含边的信息，所以从单一文件不能生成非联通图，非联通图中的单个节点也无法被完全保存，并且对于非联通图，各种算法都不保证结果正确，因此不建议用这个工具处理非联通图；

核心算法：Force-Directed图布局算法
图布局的目的在于，找到这样一个位置的集合，使当图上的节点处于这些位置时，图尽量美观。可以看到，这里的“美观”难以定义。大多数情况下，可以认为图中边的长度越平均、相交的边越少，就越“美观”。Force-Directed图布局算法的核心思想是将边想象成一条弹簧，遵从虎克定律，边太长时收缩，太短时拉长。由于每秒更新60帧，间隔非常短，可以近似地认为每次计算都是一个力微元df，然后按每帧更新。初始状态将所有节点置于随机位置。
这个算法的优点在于实现简单，并且在大多数情况下效果不错；缺点在于时间复杂度高，达到O((V ^ 2) * E)(V为节点数，E为边数)，并且有抖动现象。
Force-Directed图布局算法还有相当多的变体实现，或许可以解决抖动问题，关于这点我正在研究附带的那篇论文，作业中采用的是最简单的方式
其他常见的图布局算法有：
圆形布局，即将所有点均匀分布在一个圆上；
树形布局，在有些场合效果不错；
以及随机布局等。

本工具采用Java编写，应用的第三方库有：
processing图形库，用于绘图，最早的演示就是用这种Java的变体语言写成的，后改成了纯Java；
jung库，提供了图的数据结构和一些算法；
JSON解析库，用于读取和保存文件；
在编译源代码时注意引入相应jar包和java文件，jung和JSON文件夹下包含的文件非常多，但只用到了其中一小部分，出于这两个第三方库内部相互依赖关系的考虑，建议全部引入。